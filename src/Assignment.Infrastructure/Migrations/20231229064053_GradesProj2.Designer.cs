// <auto-generated />
using System;
using Assignment.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Infrastructure.Migrations
{
    [DbContext(typeof(RaidenDBContext))]
    [Migration("20231229064053_GradesProj2")]
    partial class GradesProj2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment.Api.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorBio")
                        .HasColumnType("text");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AuthorId")
                        .HasName("PK__Authors__70DAFC141A2742D8");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Assignment.Api.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<bool?>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Genre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BookId")
                        .HasName("PK__Books__3DE0C227BF9B6851");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Assignment.Api.BookUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC1BED877E");

                    b.ToTable("BookUsers");
                });

            modelBuilder.Entity("Assignment.Api.BorrowedBook", b =>
                {
                    b.Property<int>("BorrowId")
                        .HasColumnType("int")
                        .HasColumnName("BorrowID");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BorrowId")
                        .HasName("PK__Borrowed__4295F85F598F0F44");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("Assignment.Api.BudgetLedger", b =>
                {
                    b.Property<int>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ledgerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LedgerId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("LedgerCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("ledgerCode")
                        .HasComputedColumnSql("(('BL'+replicate('0',(5)-len([ledgerId])))+CONVERT([varchar],[ledgerId]))", false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("LedgerId")
                        .HasName("PK__BudgetLe__298DF4D5696FF6BF");

                    b.HasIndex("LedgerCode");

                    b.HasIndex("UserId");

                    b.ToTable("BudgetLedger", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<int?>("LedgerId")
                        .HasColumnType("int")
                        .HasColumnName("ledgerId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PK__category__23CAF1D8D15756DD");

                    b.HasIndex("LedgerId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("expenseId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("ExpenseId")
                        .HasName("PK__expense__3672732E40DEC0D3");

                    b.HasIndex("CategoryId");

                    b.ToTable("expense", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.ExpenseUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.Property<string>("UserCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("userCode")
                        .HasComputedColumnSql("(('USER'+replicate('0',(5)-len([userId])))+CONVERT([varchar](5),[userId]))", true);

                    b.HasKey("UserId")
                        .HasName("PK__Users__CB9A1CFF793E5508");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserCode");

                    b.HasIndex(new[] { "Phone" }, "UQ__Users__B43B145F8AD33E47")
                        .IsUnique()
                        .HasFilter("[phone] IS NOT NULL");

                    b.ToTable("ExpenseUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.Actions", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            ActionId = 1,
                            ActionName = "raiden-settings",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2430),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2431)
                        },
                        new
                        {
                            ActionId = 2,
                            ActionName = "orgsetting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2432),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2433)
                        },
                        new
                        {
                            ActionId = 3,
                            ActionName = "appsetting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2434),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2435)
                        },
                        new
                        {
                            ActionId = 4,
                            ActionName = "user",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2435),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2436)
                        },
                        new
                        {
                            ActionId = 5,
                            ActionName = "org-notification-setting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2437),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2438)
                        },
                        new
                        {
                            ActionId = 6,
                            ActionName = "app-notification-setting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2439),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2439)
                        },
                        new
                        {
                            ActionId = 7,
                            ActionName = "org-auditlog-setting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2440),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2441)
                        },
                        new
                        {
                            ActionId = 8,
                            ActionName = "app-auditlog-setting",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2441),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2442)
                        },
                        new
                        {
                            ActionId = 9,
                            ActionName = "email-event",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2443),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2443)
                        },
                        new
                        {
                            ActionId = 10,
                            ActionName = "auditlog-event",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2444),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2444)
                        },
                        new
                        {
                            ActionId = 11,
                            ActionName = "emailtemplate",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2445),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2446)
                        },
                        new
                        {
                            ActionId = 12,
                            ActionName = "auditlog",
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2447),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2447)
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.AllowedDomains", b =>
                {
                    b.Property<int>("AllowedDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllowedDomainId"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("AllowedDomainId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AllowedDomains");

                    b.HasData(
                        new
                        {
                            AllowedDomainId = 1,
                            Domain = "spurtreetech.com",
                            IsActive = true
                        },
                        new
                        {
                            AllowedDomainId = 2,
                            Domain = "spurtreetech.in",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.ApplicationUsers", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserId"));

                    b.Property<string>("AppCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Orgcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            AppCode = "BD420",
                            ApplicationId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1871),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1872),
                            OrganizationId = 1,
                            Orgcode = "CD01",
                            UserId = 3
                        },
                        new
                        {
                            AppUserId = 2,
                            AppCode = "JD420",
                            ApplicationId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1874),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1875),
                            OrganizationId = 3,
                            Orgcode = "DC02",
                            UserId = 2
                        },
                        new
                        {
                            AppUserId = 3,
                            AppCode = "JD420",
                            ApplicationId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1877),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1877),
                            OrganizationId = 3,
                            Orgcode = "DC01",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Applications", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("AppCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ApplicationEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            AppCode = "BD420",
                            ApplicationName = "BIRA",
                            ClientId = "8ff708940da64155a374154518d0191e",
                            ClientSecret = "aWwseuUhomz5zlyJB6HfSqPKCAEoRP2erOGhM2lUNzA=",
                            FirstName = "Tony",
                            IsActive = true,
                            LastName = "Stark",
                            OrganizationId = 1,
                            Phone = "07601012345"
                        },
                        new
                        {
                            ApplicationId = 2,
                            AppCode = "JD420",
                            ApplicationName = "JACK DANIALS",
                            ClientId = "8ff708940da64155a374154518d0000e",
                            ClientSecret = "aWwseuUhomz5zlyJB6HfSqPKCAEoRP2erOGhM2lUccc=",
                            FirstName = "JACK",
                            IsActive = true,
                            LastName = "SPARROW",
                            OrganizationId = 3,
                            Phone = "1800208663"
                        },
                        new
                        {
                            ApplicationId = 8,
                            AppCode = "Cyrax01",
                            ApplicationEmail = "stlabmse@gmail.com",
                            ApplicationName = "CYRAX",
                            ClientId = "23ec653fa43f44f58f1e4ece3b673685",
                            ClientSecret = "A8zvcp1ZkNJk4Sy1dzFkULSvYIGOPCFYdLFA4XbD4Ig=",
                            Description = "Send notifications",
                            FirstName = "Cyrax",
                            IsActive = true,
                            LastName = "Service",
                            OrganizationId = 8,
                            Phone = "0987654321"
                        },
                        new
                        {
                            ApplicationId = 9,
                            AppCode = "Kitana01",
                            ApplicationEmail = "kitana.dev@gmail.com",
                            ApplicationName = "KITANA",
                            ClientId = "bece4d5ec6bf40bba0396c732c47fd30",
                            ClientSecret = "G9CCFOuRCsOSvQswI4bpgiiht8lIANEtqsQVrEytXQY=",
                            Description = "Audit Logging",
                            FirstName = "Kitana",
                            IsActive = true,
                            LastName = "Service",
                            OrganizationId = 8,
                            Phone = "0987654321"
                        },
                        new
                        {
                            ApplicationId = 10,
                            AppCode = "Raiden01",
                            ApplicationEmail = "raidendev08@gmail.com",
                            ApplicationName = "RAIDEN",
                            ClientId = "4ef085f15f1d488288d22645aeb62ab8",
                            ClientSecret = "mk0BTaz5vuzfuicAgoGZ147GjVPVcDbYKdxpNs4nLpE=",
                            Description = "Centralised authorization and authentication",
                            FirstName = "Raiden",
                            IsActive = true,
                            LastName = "Service",
                            OrganizationId = 8,
                            Phone = "9035402732"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogComments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.HasKey("CommentId")
                        .HasName("PK__Blog_Com__C3B4DFAA6558CCA9");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Blog_Comments", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogPosts", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PostId")
                        .HasName("PK__Blog_Pos__AA1260387789040E");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blog_Posts", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogSubscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionLimit")
                        .HasColumnType("int");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Blog_Sub__9A2B24BD2DD349F1");

                    b.ToTable("Blog_Subscription", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogUsers", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuthor")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPostAvailable")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPostRemaining")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Subscription_Type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Blog_Use__1788CCACC7675079");

                    b.HasIndex(new[] { "Username" }, "UQ__Blog_Use__536C85E4D316E809")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Blog_Use__A9D10534FDFECB16")
                        .IsUnique();

                    b.ToTable("Blog_Users", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationID"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RegistrationID");

                    b.HasIndex("UserID");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationEvent", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<byte[]>("PosterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TimeInterval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("EventRegistrationEvent");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationOrganizer", b =>
                {
                    b.Property<int>("OrganizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerID"));

                    b.Property<string>("OrganizerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrganizerID");

                    b.HasIndex("UserID");

                    b.ToTable("EventRegistrationOrganizer");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationPass", b =>
                {
                    b.Property<int>("PassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassID"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.HasKey("PassID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("EventRegistrationPass");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationUsers", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otp")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("EventRegistrationUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.GoogleSignIn", b =>
                {
                    b.Property<int>("GoogleSignInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoogleSignInId"));

                    b.Property<bool>("HasAcceptedInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SigninEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GoogleSignInId");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleSignIn");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeGrade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Grade_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<string>("GradeLetter")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Grade_Letter");

                    b.Property<int>("Score")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SubjectCode");

                    b.HasKey("GradeId");

                    b.HasIndex("StudentCode");

                    b.HasIndex("SubjectCode");

                    b.ToTable("GradeGrade");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeStudent", b =>
                {
                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentCode");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Dob")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StudentFname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Student_Fname");

                    b.Property<string>("StudentLname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Student_Lname");

                    b.HasKey("StudentCode");

                    b.HasIndex("Class");

                    b.ToTable("GradeStudent");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeSubject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SubjectCode");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Subject_Name");

                    b.HasKey("SubjectCode");

                    b.ToTable("GradeSubject");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeTeacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TeacherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Teacher_Name");

                    b.HasKey("TeacherId");

                    b.ToTable("GradeTeacher");
                });

            modelBuilder.Entity("Assignment.Api.Models.Grades.GradeClass", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("Teacher_ID");

                    b.HasKey("ClassId");

                    b.HasIndex("Class")
                        .IsUnique();

                    b.HasIndex("TeacherId");

                    b.ToTable("GradeClass");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("InCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Home and Kitchen"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Books"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Diary"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("InProductID")
                        .HasColumnType("int");

                    b.Property<int>("MaxStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("InProductID");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.HasIndex("WareHouseId");

                    b.ToTable("InInventory");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventoryProduct", b =>
                {
                    b.Property<int>("InProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InProductID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProductCategory")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("InProductID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InInventoryProducts");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventoryWarehouseMapping", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int?>("InInventoryInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("InWarehouseWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("InInventoryInventoryId");

                    b.HasIndex("InWarehouseWarehouseId");

                    b.ToTable("InInventoryWarehouseMappings");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LocationName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("WarehouseId")
                        .IsUnique();

                    b.ToTable("InLocations");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InProductID")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InProductID");

                    b.HasIndex("ProviderId");

                    b.ToTable("InOrderDetails");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InProvider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("ProviderAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ProviderId");

                    b.ToTable("InProviders");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InUserInventoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId");

                    b.ToTable("InUserInventoryMapping");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InWarehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("WarehouseId");

                    b.ToTable("InWarehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = 1,
                            WarehouseName = "Warehouse A"
                        },
                        new
                        {
                            WarehouseId = 2,
                            WarehouseName = "Warehouse B"
                        },
                        new
                        {
                            WarehouseId = 3,
                            WarehouseName = "Warehouse C"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.OrganizationUsers", b =>
                {
                    b.Property<int>("OrgUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgUserId"));

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Orgcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrgUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUsers");

                    b.HasData(
                        new
                        {
                            OrgUserId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1803),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1806),
                            OrganizationId = 1,
                            Orgcode = "CD01",
                            UserId = 1
                        },
                        new
                        {
                            OrgUserId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1808),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1810),
                            OrganizationId = 1,
                            Orgcode = "CD01",
                            UserId = 2
                        },
                        new
                        {
                            OrgUserId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1811),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1811),
                            OrganizationId = 2,
                            Orgcode = "AB01",
                            UserId = 2
                        },
                        new
                        {
                            OrgUserId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1813),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1814),
                            OrganizationId = 8,
                            Orgcode = "STT01",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Organizations", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("OrganizationEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizationPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OrgCode")
                        .IsUnique();

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrganizationId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2472),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2473),
                            OrgCode = "CD01",
                            OrganizationEmail = "orgA@example.com",
                            OrganizationName = "Organization A",
                            OrganizationPhone = "1234567890"
                        },
                        new
                        {
                            OrganizationId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2475),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2475),
                            OrgCode = "AB01",
                            OrganizationEmail = "orgB@example.com",
                            OrganizationName = "Organization B",
                            OrganizationPhone = "9876543210"
                        },
                        new
                        {
                            OrganizationId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2477),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2477),
                            OrgCode = "DC02",
                            OrganizationEmail = "orgC@example.com",
                            OrganizationName = "Organization C",
                            OrganizationPhone = "5555555555"
                        },
                        new
                        {
                            OrganizationId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2478),
                            IsActive = true,
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2479),
                            OrgCode = "STT01",
                            OrganizationEmail = "spurtree2023@gmail.com",
                            OrganizationName = "Spurtree",
                            OrganizationPhone = "5555555555"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Permissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2288),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2289),
                            PermissionName = "view"
                        },
                        new
                        {
                            PermissionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2290),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2291),
                            PermissionName = "create"
                        },
                        new
                        {
                            PermissionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2292),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2293),
                            PermissionName = "edit"
                        },
                        new
                        {
                            PermissionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2294),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2294),
                            PermissionName = "delete"
                        },
                        new
                        {
                            PermissionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2295),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2295),
                            PermissionName = "enable"
                        },
                        new
                        {
                            PermissionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2297),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2298),
                            PermissionName = "disable"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2255),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2255),
                            ProductName = "KITANA"
                        },
                        new
                        {
                            ProductId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2256),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2257),
                            ProductName = "CYRAX"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.ProductsApplication", b =>
                {
                    b.Property<int>("ProductAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAppId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductAppId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsApplications");

                    b.HasData(
                        new
                        {
                            ProductAppId = 1,
                            ApplicationId = 1,
                            IsEnabled = true,
                            ProductId = 1
                        },
                        new
                        {
                            ProductAppId = 2,
                            ApplicationId = 1,
                            IsEnabled = true,
                            ProductId = 2
                        },
                        new
                        {
                            ProductAppId = 3,
                            ApplicationId = 2,
                            IsEnabled = true,
                            ProductId = 1
                        },
                        new
                        {
                            ProductAppId = 4,
                            ApplicationId = 2,
                            IsEnabled = true,
                            ProductId = 2
                        },
                        new
                        {
                            ProductAppId = 5,
                            ApplicationId = 8,
                            IsEnabled = true,
                            ProductId = 1
                        },
                        new
                        {
                            ProductAppId = 6,
                            ApplicationId = 8,
                            IsEnabled = true,
                            ProductId = 2
                        },
                        new
                        {
                            ProductAppId = 7,
                            ApplicationId = 9,
                            IsEnabled = true,
                            ProductId = 1
                        },
                        new
                        {
                            ProductAppId = 8,
                            ApplicationId = 9,
                            IsEnabled = true,
                            ProductId = 2
                        },
                        new
                        {
                            ProductAppId = 9,
                            ApplicationId = 10,
                            IsEnabled = true,
                            ProductId = 1
                        },
                        new
                        {
                            ProductAppId = 10,
                            ApplicationId = 10,
                            IsEnabled = true,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("QuizId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LevelId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId")
                        .HasName("PK__QuizAnsw__D4825004917C4A47");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__QuizCate__19093A0B787E379B");

                    b.HasIndex("LevelId");

                    b.ToTable("QuizCategories");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuizType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LevelId")
                        .HasName("PK__QuizLeve__09F03C269EE1AA23");

                    b.ToTable("QuizLevels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            Name = "Beginner",
                            QuizType = "MCQ"
                        },
                        new
                        {
                            LevelId = 2,
                            Name = "Pro",
                            QuizType = "Typing"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("PK__QuizQues__0DC06FACA59EE87C");

                    b.HasIndex("CategoryId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizScore", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScoreId")
                        .HasName("PK__QuizScor__7DD229D1A7C5F9C3");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizScores");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__QuizUser__1788CC4C7FFE809B");

                    b.HasIndex(new[] { "Email" }, "UQ__QuizUser__A9D10534BCE506A7")
                        .IsUnique();

                    b.ToTable("QuizUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.RecipeChefMapping", b =>
                {
                    b.Property<int>("ChefId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("ChefId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeChefMapping");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.RecipeChefs", b =>
                {
                    b.Property<int>("ChefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChefId"));

                    b.Property<string>("ChefName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChefId");

                    b.ToTable("RecipeChefs");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<string>("Cuisine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Steps")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Assignment.Api.Models.RoleActionPermission", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationId"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("OperationId");

                    b.HasIndex("ActionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleActionPermission");

                    b.HasData(
                        new
                        {
                            OperationId = 1,
                            ActionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1894),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1895),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 2,
                            ActionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1897),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1897),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 3,
                            ActionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1898),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1899),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 4,
                            ActionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1900),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1901),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 5,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1902),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1902),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 6,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1903),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1904),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 7,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1905),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1906),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 8,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1907),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1907),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 9,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1908),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1909),
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 10,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1910),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1910),
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 11,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1911),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1912),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 12,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1913),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1913),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 13,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1914),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1915),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 14,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1916),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1916),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 15,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1919),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1920),
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 16,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1921),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1922),
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 17,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1923),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1923),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 18,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1924),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1925),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 19,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1926),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1926),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 20,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1927),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1928),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 21,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1930),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1931),
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 22,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1932),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1933),
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 23,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1934),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1934),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 24,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1935),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1936),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 25,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1937),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1938),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 26,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1939),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1939),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 27,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1940),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1941),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 28,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1943),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1943),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 29,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1944),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1945),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 30,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1946),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1946),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 31,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1947),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1948),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 32,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1949),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1950),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 33,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1951),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1951),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 34,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1953),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1953),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 35,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1954),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1955),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 36,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1956),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1956),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 37,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1957),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1958),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 38,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1959),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1959),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 39,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1960),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1961),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 40,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1962),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1962),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 41,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1963),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1964),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 42,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1965),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1965),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 43,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1966),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1967),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 44,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1968),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1968),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 45,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1969),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1970),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 46,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1971),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1971),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 47,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1972),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(1973),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 48,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2009),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2010),
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 49,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2011),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2011),
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 50,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2012),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2013),
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 51,
                            ActionId = 12,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2014),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2014),
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            OperationId = 52,
                            ActionId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2015),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2016),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 53,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2017),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2017),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 54,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2019),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2020),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 55,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2021),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2021),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 56,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2022),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2023),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 57,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2024),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2024),
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 58,
                            ActionId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2025),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2026),
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 59,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2027),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2027),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 60,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2029),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2029),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 61,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2030),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2030),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 62,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2032),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2032),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 63,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2033),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2034),
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 64,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2035),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2035),
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 65,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2037),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2037),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 66,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2038),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2039),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 67,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2040),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2040),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 68,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2041),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2042),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 69,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2043),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2044),
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 70,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2045),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2045),
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 71,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2046),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2046),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 72,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2047),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2048),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 73,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2049),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2049),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 74,
                            ActionId = 5,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2051),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2051),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 75,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2052),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2053),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 76,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2054),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2055),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 77,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2056),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2056),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 78,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2057),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2058),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 79,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2059),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2059),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 80,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2060),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2061),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 81,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2062),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2062),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 82,
                            ActionId = 7,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2063),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2064),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 83,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2065),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2065),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 84,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2066),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2067),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 85,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2068),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2068),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 86,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2069),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2070),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 87,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2075),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2075),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 88,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2076),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2077),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 89,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2078),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2078),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 90,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2079),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2080),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 91,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2081),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2081),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 92,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2083),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2083),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 93,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2084),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2085),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 94,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2086),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2086),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 95,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2087),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2088),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 96,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2089),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2089),
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 97,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2090),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2091),
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 98,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2092),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2093),
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 99,
                            ActionId = 12,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2094),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2094),
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            OperationId = 100,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2096),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2096),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 101,
                            ActionId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2097),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2098),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 102,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2099),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2099),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 103,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2100),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2101),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 104,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2102),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2102),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 105,
                            ActionId = 4,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2103),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2103),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 106,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2104),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2105),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 107,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2106),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2106),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 108,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2108),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2108),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 109,
                            ActionId = 6,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2109),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2110),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 110,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2111),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2112),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 111,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2113),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2113),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 112,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2114),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2115),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 113,
                            ActionId = 8,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2116),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2116),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 114,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2117),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2118),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 115,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2119),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2119),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 116,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2120),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2121),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 117,
                            ActionId = 9,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2122),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2122),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 118,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2123),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2124),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 119,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2125),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2125),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 120,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2126),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2128),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 121,
                            ActionId = 10,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2129),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2129),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 122,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2130),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2131),
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 123,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2132),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2132),
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 124,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2133),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2134),
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 125,
                            ActionId = 11,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2135),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2135),
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            OperationId = 126,
                            ActionId = 12,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2136),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 831, DateTimeKind.Local).AddTicks(2137),
                            PermissionId = 1,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2248),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2258),
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2260),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2261),
                            RoleName = "OrgAdmin"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2262),
                            ModifiedTimestamp = new DateTime(2023, 12, 29, 12, 10, 52, 829, DateTimeKind.Local).AddTicks(2263),
                            RoleName = "AppAdmin"
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskManager", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("TaskUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TaskId");

                    b.HasIndex("DependencyId");

                    b.ToTable("TaskManager");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskTag", b =>
                {
                    b.Property<int>("TaskTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskTagId"));

                    b.Property<string>("TagName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskManagerTaskTaskId")
                        .HasColumnType("int");

                    b.HasKey("TaskTagId");

                    b.HasIndex("TaskManagerTaskTaskId");

                    b.ToTable("TaskTag");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskTimeLog", b =>
                {
                    b.Property<int>("TimeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeLogId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StopTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskManagerTaskTaskId")
                        .HasColumnType("int");

                    b.HasKey("TimeLogId");

                    b.HasIndex("TaskManagerTaskTaskId");

                    b.ToTable("TaskTimeLog");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskUsers", b =>
                {
                    b.Property<int>("TaskUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskUserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TaskUserId");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            OrganizationId = 1,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            ApplicationId = 2,
                            OrganizationId = 3,
                            RoleId = 3,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 4,
                            ApplicationId = 1,
                            OrganizationId = 1,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 5,
                            OrganizationId = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 6,
                            OrganizationId = 2,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 7,
                            OrganizationId = 8,
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 8,
                            RoleId = 1,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Assignment.Api.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Spurtree@example.com",
                            FirstName = "Spurtree",
                            IsActive = true,
                            Password = "Pass@123",
                            TokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Abhay@example.com",
                            FirstName = "Abhay",
                            IsActive = true,
                            Password = "Pass@123",
                            TokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 3,
                            Email = "Bhoomi@example.com",
                            FirstName = "Bhoomi",
                            IsActive = true,
                            Password = "Pass@123",
                            TokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = 4,
                            Email = "pavan.m@spurtreetech.com",
                            FirstName = "pavan",
                            IsActive = true,
                            Password = "Pass@123",
                            TokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("BookingId")
                        .HasName("PK__CarRenta__73951ACDA7E24354");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CarRental_Bookings", (string)null);
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalCar", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnderMaintenance")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("date");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("RentalRatePerDay")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId")
                        .HasName("PK__CarRenta__68A0340EBDB30A5A");

                    b.ToTable("CarRental_Cars", (string)null);
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsPremiumCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MembershipExpiration")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId")
                        .HasName("PK__CarRenta__A4AE64B83328061C");

                    b.ToTable("CarRental_Customers", (string)null);
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ImageURL");

                    b.HasKey("ImageId")
                        .HasName("PK__CarRenta__7516F4ECDBED5D35");

                    b.HasIndex("CarId");

                    b.ToTable("CarRental_Images", (string)null);
                });

            modelBuilder.Entity("Assignment.Api.Book", b =>
                {
                    b.HasOne("Assignment.Api.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Books__AuthorID__398D8EEE");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Assignment.Api.BorrowedBook", b =>
                {
                    b.HasOne("Assignment.Api.Book", "Book")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__BorrowedB__BookI__3F466844");

                    b.HasOne("Assignment.Api.BookUser", "User")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__BorrowedB__UserI__3E52440B");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Api.BudgetLedger", b =>
                {
                    b.HasOne("Assignment.Api.ExpenseUser", "User")
                        .WithMany("BudgetLedgers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__BudgetLed__userI__619B8048");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Api.Category", b =>
                {
                    b.HasOne("Assignment.Api.BudgetLedger", "Ledger")
                        .WithMany("Categories")
                        .HasForeignKey("LedgerId")
                        .HasConstraintName("FK__category__ledger__6477ECF3");

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("Assignment.Api.Expense", b =>
                {
                    b.HasOne("Assignment.Api.Category", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__expense__amount__6754599E");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment.Api.Models.AllowedDomains", b =>
                {
                    b.HasOne("Assignment.Api.Models.Applications", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Assignment.Api.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Applications");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Assignment.Api.Models.ApplicationUsers", b =>
                {
                    b.HasOne("Assignment.Api.Models.Applications", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Assignment.Api.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applications");

                    b.Navigation("Organizations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Api.Models.Applications", b =>
                {
                    b.HasOne("Assignment.Api.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogComments", b =>
                {
                    b.HasOne("Assignment.Api.Models.BlogModels.BlogUsers", "Author")
                        .WithMany("BlogComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.BlogModels.BlogPosts", "Post")
                        .WithMany("BlogComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogPosts", b =>
                {
                    b.HasOne("Assignment.Api.Models.BlogModels.BlogUsers", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistration", b =>
                {
                    b.HasOne("Assignment.Api.Models.EventRegistrationEvent", "EventRegistrationEvent")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.EventRegistrationUsers", "EventRegistrationUsers")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRegistrationEvent");

                    b.Navigation("EventRegistrationUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationEvent", b =>
                {
                    b.HasOne("Assignment.Api.Models.EventRegistrationOrganizer", "EventRegistrationOrganizer")
                        .WithMany()
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventRegistrationOrganizer");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationOrganizer", b =>
                {
                    b.HasOne("Assignment.Api.Models.EventRegistrationUsers", "EventRegistrationUsers")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRegistrationUsers");
                });

            modelBuilder.Entity("Assignment.Api.Models.EventRegistrationPass", b =>
                {
                    b.HasOne("Assignment.Api.Models.EventRegistration", "EventRegistration")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventRegistration");
                });

            modelBuilder.Entity("Assignment.Api.Models.GoogleSignIn", b =>
                {
                    b.HasOne("Assignment.Api.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeGrade", b =>
                {
                    b.HasOne("Assignment.Api.Models.GradeStudent", "Student")
                        .WithMany("GradeGrades")
                        .HasForeignKey("StudentCode");

                    b.HasOne("Assignment.Api.Models.GradeSubject", "Subject")
                        .WithMany("GradeGrades")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeStudent", b =>
                {
                    b.HasOne("Assignment.Api.Models.Grades.GradeClass", "ClassNavigation")
                        .WithMany("GradeStudents")
                        .HasForeignKey("Class")
                        .HasPrincipalKey("Class")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassNavigation");
                });

            modelBuilder.Entity("Assignment.Api.Models.Grades.GradeClass", b =>
                {
                    b.HasOne("Assignment.Api.Models.GradeTeacher", "Teacher")
                        .WithMany("GradeClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventory", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InInventoryProduct", "InInventoryProduct")
                        .WithMany()
                        .HasForeignKey("InProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Inventory.InProvider", "InProvider")
                        .WithOne()
                        .HasForeignKey("Assignment.Api.Models.Inventory.InInventory", "ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Inventory.InWarehouse", "InWarehouse")
                        .WithMany()
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InInventoryProduct");

                    b.Navigation("InProvider");

                    b.Navigation("InWarehouse");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventoryProduct", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InCategory", "InCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Inventory.InWarehouse", "InWarehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InCategory");

                    b.Navigation("InWarehouse");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InInventoryWarehouseMapping", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InInventory", "InInventory")
                        .WithMany()
                        .HasForeignKey("InInventoryInventoryId");

                    b.HasOne("Assignment.Api.Models.Inventory.InWarehouse", "InWarehouse")
                        .WithMany()
                        .HasForeignKey("InWarehouseWarehouseId");

                    b.Navigation("InInventory");

                    b.Navigation("InWarehouse");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InLocation", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InWarehouse", "InWarehouse")
                        .WithOne()
                        .HasForeignKey("Assignment.Api.Models.Inventory.InLocation", "WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InWarehouse");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InOrderDetail", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InCategory", "InCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Inventory.InInventoryProduct", "InInventoryProduct")
                        .WithMany()
                        .HasForeignKey("InProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Inventory.InProvider", "InProvider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InCategory");

                    b.Navigation("InInventoryProduct");

                    b.Navigation("InProvider");
                });

            modelBuilder.Entity("Assignment.Api.Models.Inventory.InUserInventoryMapping", b =>
                {
                    b.HasOne("Assignment.Api.Models.Inventory.InInventory", "InInventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InInventory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Api.Models.OrganizationUsers", b =>
                {
                    b.HasOne("Assignment.Api.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Api.Models.ProductsApplication", b =>
                {
                    b.HasOne("Assignment.Api.Models.Applications", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applications");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.Quiz", b =>
                {
                    b.HasOne("Assignment.Api.Models.QuizGame.QuizCategory", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Assignment.Api.Models.QuizGame.QuizLevel", "Level")
                        .WithMany("Quizzes")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizAnswer", b =>
                {
                    b.HasOne("Assignment.Api.Models.QuizGame.QuizQuestion", "Question")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__QuizAnswe__Quest__5E8A0973");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizCategory", b =>
                {
                    b.HasOne("Assignment.Api.Models.QuizGame.QuizLevel", "Level")
                        .WithMany("QuizCategories")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__QuizCateg__Level__58D1301D");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizQuestion", b =>
                {
                    b.HasOne("Assignment.Api.Models.QuizGame.QuizCategory", "Category")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__QuizQuest__Categ__5BAD9CC8");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizScore", b =>
                {
                    b.HasOne("Assignment.Api.Models.QuizGame.QuizLevel", "Level")
                        .WithMany("QuizScores")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK__QuizScore__Level__681373AD");

                    b.HasOne("Assignment.Api.Models.QuizGame.Quiz", "Quiz")
                        .WithMany("QuizScores")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK__QuizScore__QuizI__671F4F74");

                    b.HasOne("Assignment.Api.Models.QuizGame.QuizUser", "User")
                        .WithMany("QuizScores")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__QuizScore__UserI__662B2B3B");

                    b.Navigation("Level");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.RecipeChefMapping", b =>
                {
                    b.HasOne("Assignment.Api.Models.Recipe.RecipeChefs", "Chef")
                        .WithMany("RecipeMappings")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Recipe.Recipes", "Recipe")
                        .WithMany("ChefMappings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Assignment.Api.Models.RoleActionPermission", b =>
                {
                    b.HasOne("Assignment.Api.Models.Actions", "Actions")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Permissions", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actions");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskManager", b =>
                {
                    b.HasOne("Assignment.Api.Models.TaskUsers", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskTag", b =>
                {
                    b.HasOne("Assignment.Api.Models.TaskManager", "TaskManagerTask")
                        .WithMany()
                        .HasForeignKey("TaskManagerTaskTaskId");

                    b.Navigation("TaskManagerTask");
                });

            modelBuilder.Entity("Assignment.Api.Models.TaskTimeLog", b =>
                {
                    b.HasOne("Assignment.Api.Models.TaskManager", "TaskManagerTask")
                        .WithMany()
                        .HasForeignKey("TaskManagerTaskTaskId");

                    b.Navigation("TaskManagerTask");
                });

            modelBuilder.Entity("Assignment.Api.Models.UserRole", b =>
                {
                    b.HasOne("Assignment.Api.Models.Applications", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assignment.Api.Models.Organizations", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assignment.Api.Models.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assignment.Api.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalBooking", b =>
                {
                    b.HasOne("Assignment.Infrastructure.CarRentalCar", "Car")
                        .WithMany("CarRentalBookings")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__CarRental__CarID__5224328E");

                    b.HasOne("Assignment.Infrastructure.CarRentalCustomer", "Customer")
                        .WithMany("CarRentalBookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__CarRental__Custo__531856C7");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalImage", b =>
                {
                    b.HasOne("Assignment.Infrastructure.CarRentalCar", "Car")
                        .WithMany("CarRentalImages")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__CarRental__CarID__55F4C372");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Assignment.Api.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Assignment.Api.Book", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("Assignment.Api.BookUser", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("Assignment.Api.BudgetLedger", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Assignment.Api.Category", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Assignment.Api.ExpenseUser", b =>
                {
                    b.Navigation("BudgetLedgers");
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogPosts", b =>
                {
                    b.Navigation("BlogComments");
                });

            modelBuilder.Entity("Assignment.Api.Models.BlogModels.BlogUsers", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeStudent", b =>
                {
                    b.Navigation("GradeGrades");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeSubject", b =>
                {
                    b.Navigation("GradeGrades");
                });

            modelBuilder.Entity("Assignment.Api.Models.GradeTeacher", b =>
                {
                    b.Navigation("GradeClasses");
                });

            modelBuilder.Entity("Assignment.Api.Models.Grades.GradeClass", b =>
                {
                    b.Navigation("GradeStudents");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.Quiz", b =>
                {
                    b.Navigation("QuizScores");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizCategory", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizLevel", b =>
                {
                    b.Navigation("QuizCategories");

                    b.Navigation("QuizScores");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("Assignment.Api.Models.QuizGame.QuizUser", b =>
                {
                    b.Navigation("QuizScores");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.RecipeChefs", b =>
                {
                    b.Navigation("RecipeMappings");
                });

            modelBuilder.Entity("Assignment.Api.Models.Recipe.Recipes", b =>
                {
                    b.Navigation("ChefMappings");
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalCar", b =>
                {
                    b.Navigation("CarRentalBookings");

                    b.Navigation("CarRentalImages");
                });

            modelBuilder.Entity("Assignment.Infrastructure.CarRentalCustomer", b =>
                {
                    b.Navigation("CarRentalBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
